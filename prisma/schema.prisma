generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id            String         @id @default(cuid())
  name          String
  description   String
  price         Float
  discountPrice Float?
  material      String
  category_id   String
  category      Category     @relation(fields: [category_id], references: [id])
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  status        ProductStatus  @default(DRAFT)
  colors        ProductColor[]
  assets        ProductAsset[]
  ProductRating  ProductRating[]
  ProductPerformance ProductPerformance[]
  sales         SalesSummary[]
  OrderItem     OrderItem[]
}

model ProductColor {
  id        String  @id @default(cuid())
  color     String // Example: "Red", "Blue", etc.
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String

  assets ProductAsset[] // Images for the specific color
  sizes  ProductVariant[]
}

model ProductVariant {
  id      String         @id @default(cuid())
  size    VariantsValues
  stock   Int
  color   ProductColor   @relation(fields: [colorId], references: [id], onDelete: Cascade)
  colorId String

  OrderItem OrderItem[]
}

model ProductAsset {
  id        String        @id @default(cuid())
  asset_url String
  product   Product?      @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String?
  type      AssetType     @default(IMAGE)
  color     ProductColor? @relation(fields: [colorId], references: [id], onDelete: Cascade)
  colorId   String?
}

model Category {
  id           String   @id @default(cuid())
  name         String
  description  String?
  productCount Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  Product Product[]
}

enum ProductStatus {
  DRAFT
  PUBLISHED
}

enum AssetType {
  IMAGE
  VIDEO
}

enum VariantsValues {
  SIZE_5 // UK/India Size 5 (US Men 6, US Women 5, EU 38)
  SIZE_6 // UK/India Size 6 (US Men 7, US Women 6, EU 39)
  SIZE_7 // UK/India Size 7 (US Men 8, US Women 7, EU 40)
  SIZE_8 // UK/India Size 8 (US Men 9, US Women 8, EU 41)
  SIZE_9 // UK/India Size 9 (US Men 10, US Women 9, EU 42)
  SIZE_10 // UK/India Size 10 (US Men 11, US Women 10, EU 43)
  SIZE_11 // UK/India Size 11 (US Men 12, US Women 11, EU 44)
  SIZE_12 // UK/India Size 12 (US Men 13, US Women 12, EU 47)
}

model User {

  id                String    @id @default(cuid())
  name              String?
  mobile_no         String    @unique
  isPhoneNoVerified Boolean   @default(false)
  phoneNoVerified   DateTime?
  image             String?
  email             String?    @unique
  isEmailVerified Boolean @default(false)
  emailVerified     DateTime?
  accounts          Account[]
  sessions          Session[]
  password          String?
  role              UserType  @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Order       Order[]
  ProductRating ProductRating[]
  Address Address[]

  Otp Otp[]
}

model Address {
  id      String @id @default(uuid())
  name    String
  phone   String
  street  String
  city    String
  state   String
  country String
  zipCode String
  userId  String // Foreign key to User
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Order Order[]
}

enum UserType {
  ADMIN
  USER
}

model Otp {
  id        String   @id @default(cuid())
  otp       String   @unique
  userphone String   @unique
  user      User     @relation(fields: [userphone], references: [mobile_no], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  jwt     String?
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Order {
  id          String           @id @default(cuid())
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  items       OrderItem[] // Join table for order items
  total       Float
  status      OrderStatus
  awb         String?
  DeliveryStatus String?       @default("PENDING")
  etd         String?
  paid         Boolean         @default(false)
  fulfillment OrderFulfillment
  addressId   String
  address     Address          @relation(fields: [addressId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderItem {
  id               String         @id @default(cuid())
  order            Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId          String
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id], onDelete: Cascade)
  productVariantId String
  quantity         Int
  priceAtOrder     Float
  color            String
  productImage     String
  productName      String
  size             String
  productId        String
  product          Product      @relation(fields: [productId], references: [id], onDelete: Cascade)
}
enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum OrderFulfillment {
  PENDING // Added for initial state
  SHIPPED
  DELIVERED
  RETURNED
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}


model ProductRating {
  id          String   @id @default(cuid())
  userId      String? // Foreign key for user (optional for guest users)
  productId   String // Foreign key for product
  title       String
  description String
  image       String?
  rating      Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user    User?   @relation(fields: [userId], references: [id], onDelete: SetNull)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

}

model Testimonial {
  id          String   @id @default(cuid())
  username    String
  role        String
  description String
  image       String
  ratings     Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ContactForm {
  id          String   @id @default(cuid())
  name        String
  email       String
  phone       String
  message     String
  Status      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model SalesSummary {
  id             String   @id @default(uuid())
  date           DateTime @unique
  totalRevenue   Float
  salesGrowth    Float
  totalOrders    Int
  newCustomers   Int

  productId      String
  product        Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model ProductPerformance {
  id           String   @id @default(uuid())
  productId    String
  product      Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  date         DateTime @default(now())
  revenue      Decimal  @default(0.0) 
  orders       Int      @default(0)
  rating       Float?  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([productId, date]) // Ensures one record per product per day
  @@index([date]) // Adds an index on the 'date' field
}


model ShiprocketToken {
  id     Int      @id @default(1)
  token  String
  createdAt DateTime @default(now())
}